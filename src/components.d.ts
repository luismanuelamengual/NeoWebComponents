/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  NgDataTableColumn,
} from './components/datatable/NgDataTableColumn';
import {
  NgDataTableDataSource,
} from './components/datatable/NgDataTableDataSource';
import {
  NgDataTableSorter,
} from './components/datatable/NgDataTableSorter';

export namespace Components {
  interface NgAlert {
    'closable': boolean;
    'header': string;
    'type': "info" | "danger" | "warning" | "success";
  }
  interface NgArea {
    'collapsed': boolean;
    'collapsible': boolean;
    'maxSize': number;
    'minSize': number;
    'region': 'north' | 'south' | 'west' | 'east' | 'center';
    'resizable': boolean;
    'size': number;
    'splitter': boolean;
  }
  interface NgAreaContainer {
    'splitterSize': number;
  }
  interface NgButton {
    'disabled': boolean;
    'inline': boolean;
    'label': string;
    'type': 'default' | 'primary' | 'danger';
  }
  interface NgCol {
    'lgSize': number;
    'mdSize': number;
    'smSize': number;
    'xlSize': number;
  }
  interface NgContainer {
    'fluid': boolean;
  }
  interface NgDataTable {
    'columns'?: NgDataTableColumn[];
    'data': any[];
    'dataSource': NgDataTableDataSource;
    'defaultColumnConfig': NgDataTableColumn;
    'fullsize': boolean;
    'page': number;
    'pageSize': number;
    'sorters': NgDataTableSorter[];
  }
  interface NgDateTimeField {
    'autoComplete': boolean;
    'disabled': boolean;
    'emptyText': string;
    'inline': boolean;
    'label': string;
    'name': string;
    'readOnly': boolean;
    'required': boolean;
    'size': number;
    'value': string;
  }
  interface NgDateTimePicker {
    'format': string;
    'getValue': () => Promise<string>;
    'setValue': (value: string) => Promise<void>;
    'showDateControls': boolean;
    'showTimeControls': boolean;
    'value': string;
  }
  interface NgField {
    'inline': boolean;
    'label': string;
  }
  interface NgIcon {
    'bordered': boolean;
    'fixedWidth': boolean;
    'name': string;
    'pullLeft': boolean;
    'pullRight': boolean;
    'size': 'xs' | 'sm' | 'lg' | '2x' | '3x' | '5x' | '7x' | '10x';
    'spin': boolean;
    'type': 'solid' | 'regular';
  }
  interface NgMenu {
    'anchorEl': HTMLElement;
    'anchorOriginHorizontal': 'left' | 'center' | 'right';
    'anchorOriginVertical': 'top' | 'center' | 'bottom';
    'anchorPositionLeft': number;
    'anchorPositionTop': number;
    'anchorReference': 'anchorEl' | 'anchorPosition';
    'menuItems': any[];
  }
  interface NgMenuItem {
    'caption': string;
    'checked': true | false | null;
    'menu': any[];
    'open': boolean;
  }
  interface NgNumberField {
    'autoComplete': boolean;
    'disabled': boolean;
    'emptyText': string;
    'inline': boolean;
    'label': string;
    'maxValue': number;
    'minValue': number;
    'name': string;
    'readOnly': boolean;
    'required': boolean;
    'size': number;
    'step': number;
    'value': number;
  }
  interface NgPage {}
  interface NgPageContent {}
  interface NgPanel {
    'addFooter': boolean;
    'addHeader': boolean;
  }
  interface NgRow {}
  interface NgTab {
    'active': boolean;
    'closable': boolean;
    'label': string;
    'padding': boolean;
  }
  interface NgTabPanel {
    'openTab': (index: number) => Promise<void>;
    'removeTab': (index: number) => Promise<void>;
  }
  interface NgTextField {
    'autoComplete': boolean;
    'disabled': boolean;
    'emptyText': string;
    'inline': boolean;
    'label': string;
    'name': string;
    'readOnly': boolean;
    'required': boolean;
    'size': number;
    'value': string;
  }
  interface NgToolbar {
    'header': string;
  }
  interface NgWidget {
    'expanded': boolean;
    'fullScreen': boolean;
    'icon': string;
    'label': string;
    'padding': boolean;
  }
}

declare global {


  interface HTMLNgAlertElement extends Components.NgAlert, HTMLStencilElement {}
  var HTMLNgAlertElement: {
    prototype: HTMLNgAlertElement;
    new (): HTMLNgAlertElement;
  };

  interface HTMLNgAreaElement extends Components.NgArea, HTMLStencilElement {}
  var HTMLNgAreaElement: {
    prototype: HTMLNgAreaElement;
    new (): HTMLNgAreaElement;
  };

  interface HTMLNgAreaContainerElement extends Components.NgAreaContainer, HTMLStencilElement {}
  var HTMLNgAreaContainerElement: {
    prototype: HTMLNgAreaContainerElement;
    new (): HTMLNgAreaContainerElement;
  };

  interface HTMLNgButtonElement extends Components.NgButton, HTMLStencilElement {}
  var HTMLNgButtonElement: {
    prototype: HTMLNgButtonElement;
    new (): HTMLNgButtonElement;
  };

  interface HTMLNgColElement extends Components.NgCol, HTMLStencilElement {}
  var HTMLNgColElement: {
    prototype: HTMLNgColElement;
    new (): HTMLNgColElement;
  };

  interface HTMLNgContainerElement extends Components.NgContainer, HTMLStencilElement {}
  var HTMLNgContainerElement: {
    prototype: HTMLNgContainerElement;
    new (): HTMLNgContainerElement;
  };

  interface HTMLNgDataTableElement extends Components.NgDataTable, HTMLStencilElement {}
  var HTMLNgDataTableElement: {
    prototype: HTMLNgDataTableElement;
    new (): HTMLNgDataTableElement;
  };

  interface HTMLNgDateTimeFieldElement extends Components.NgDateTimeField, HTMLStencilElement {}
  var HTMLNgDateTimeFieldElement: {
    prototype: HTMLNgDateTimeFieldElement;
    new (): HTMLNgDateTimeFieldElement;
  };

  interface HTMLNgDateTimePickerElement extends Components.NgDateTimePicker, HTMLStencilElement {}
  var HTMLNgDateTimePickerElement: {
    prototype: HTMLNgDateTimePickerElement;
    new (): HTMLNgDateTimePickerElement;
  };

  interface HTMLNgFieldElement extends Components.NgField, HTMLStencilElement {}
  var HTMLNgFieldElement: {
    prototype: HTMLNgFieldElement;
    new (): HTMLNgFieldElement;
  };

  interface HTMLNgIconElement extends Components.NgIcon, HTMLStencilElement {}
  var HTMLNgIconElement: {
    prototype: HTMLNgIconElement;
    new (): HTMLNgIconElement;
  };

  interface HTMLNgMenuElement extends Components.NgMenu, HTMLStencilElement {}
  var HTMLNgMenuElement: {
    prototype: HTMLNgMenuElement;
    new (): HTMLNgMenuElement;
  };

  interface HTMLNgMenuItemElement extends Components.NgMenuItem, HTMLStencilElement {}
  var HTMLNgMenuItemElement: {
    prototype: HTMLNgMenuItemElement;
    new (): HTMLNgMenuItemElement;
  };

  interface HTMLNgNumberFieldElement extends Components.NgNumberField, HTMLStencilElement {}
  var HTMLNgNumberFieldElement: {
    prototype: HTMLNgNumberFieldElement;
    new (): HTMLNgNumberFieldElement;
  };

  interface HTMLNgPageElement extends Components.NgPage, HTMLStencilElement {}
  var HTMLNgPageElement: {
    prototype: HTMLNgPageElement;
    new (): HTMLNgPageElement;
  };

  interface HTMLNgPageContentElement extends Components.NgPageContent, HTMLStencilElement {}
  var HTMLNgPageContentElement: {
    prototype: HTMLNgPageContentElement;
    new (): HTMLNgPageContentElement;
  };

  interface HTMLNgPanelElement extends Components.NgPanel, HTMLStencilElement {}
  var HTMLNgPanelElement: {
    prototype: HTMLNgPanelElement;
    new (): HTMLNgPanelElement;
  };

  interface HTMLNgRowElement extends Components.NgRow, HTMLStencilElement {}
  var HTMLNgRowElement: {
    prototype: HTMLNgRowElement;
    new (): HTMLNgRowElement;
  };

  interface HTMLNgTabElement extends Components.NgTab, HTMLStencilElement {}
  var HTMLNgTabElement: {
    prototype: HTMLNgTabElement;
    new (): HTMLNgTabElement;
  };

  interface HTMLNgTabPanelElement extends Components.NgTabPanel, HTMLStencilElement {}
  var HTMLNgTabPanelElement: {
    prototype: HTMLNgTabPanelElement;
    new (): HTMLNgTabPanelElement;
  };

  interface HTMLNgTextFieldElement extends Components.NgTextField, HTMLStencilElement {}
  var HTMLNgTextFieldElement: {
    prototype: HTMLNgTextFieldElement;
    new (): HTMLNgTextFieldElement;
  };

  interface HTMLNgToolbarElement extends Components.NgToolbar, HTMLStencilElement {}
  var HTMLNgToolbarElement: {
    prototype: HTMLNgToolbarElement;
    new (): HTMLNgToolbarElement;
  };

  interface HTMLNgWidgetElement extends Components.NgWidget, HTMLStencilElement {}
  var HTMLNgWidgetElement: {
    prototype: HTMLNgWidgetElement;
    new (): HTMLNgWidgetElement;
  };
  interface HTMLElementTagNameMap {
    'ng-alert': HTMLNgAlertElement;
    'ng-area': HTMLNgAreaElement;
    'ng-area-container': HTMLNgAreaContainerElement;
    'ng-button': HTMLNgButtonElement;
    'ng-col': HTMLNgColElement;
    'ng-container': HTMLNgContainerElement;
    'ng-data-table': HTMLNgDataTableElement;
    'ng-date-time-field': HTMLNgDateTimeFieldElement;
    'ng-date-time-picker': HTMLNgDateTimePickerElement;
    'ng-field': HTMLNgFieldElement;
    'ng-icon': HTMLNgIconElement;
    'ng-menu': HTMLNgMenuElement;
    'ng-menu-item': HTMLNgMenuItemElement;
    'ng-number-field': HTMLNgNumberFieldElement;
    'ng-page': HTMLNgPageElement;
    'ng-page-content': HTMLNgPageContentElement;
    'ng-panel': HTMLNgPanelElement;
    'ng-row': HTMLNgRowElement;
    'ng-tab': HTMLNgTabElement;
    'ng-tab-panel': HTMLNgTabPanelElement;
    'ng-text-field': HTMLNgTextFieldElement;
    'ng-toolbar': HTMLNgToolbarElement;
    'ng-widget': HTMLNgWidgetElement;
  }
}

declare namespace LocalJSX {
  interface NgAlert extends JSXBase.HTMLAttributes<HTMLNgAlertElement> {
    'closable'?: boolean;
    'header'?: string;
    'type'?: "info" | "danger" | "warning" | "success";
  }
  interface NgArea extends JSXBase.HTMLAttributes<HTMLNgAreaElement> {
    'collapsed'?: boolean;
    'collapsible'?: boolean;
    'maxSize'?: number;
    'minSize'?: number;
    'region'?: 'north' | 'south' | 'west' | 'east' | 'center';
    'resizable'?: boolean;
    'size'?: number;
    'splitter'?: boolean;
  }
  interface NgAreaContainer extends JSXBase.HTMLAttributes<HTMLNgAreaContainerElement> {
    'splitterSize'?: number;
  }
  interface NgButton extends JSXBase.HTMLAttributes<HTMLNgButtonElement> {
    'disabled'?: boolean;
    'inline'?: boolean;
    'label'?: string;
    'type'?: 'default' | 'primary' | 'danger';
  }
  interface NgCol extends JSXBase.HTMLAttributes<HTMLNgColElement> {
    'lgSize'?: number;
    'mdSize'?: number;
    'smSize'?: number;
    'xlSize'?: number;
  }
  interface NgContainer extends JSXBase.HTMLAttributes<HTMLNgContainerElement> {
    'fluid'?: boolean;
  }
  interface NgDataTable extends JSXBase.HTMLAttributes<HTMLNgDataTableElement> {
    'columns'?: NgDataTableColumn[];
    'data'?: any[];
    'dataSource'?: NgDataTableDataSource;
    'defaultColumnConfig'?: NgDataTableColumn;
    'fullsize'?: boolean;
    'page'?: number;
    'pageSize'?: number;
    'sorters'?: NgDataTableSorter[];
  }
  interface NgDateTimeField extends JSXBase.HTMLAttributes<HTMLNgDateTimeFieldElement> {
    'autoComplete'?: boolean;
    'disabled'?: boolean;
    'emptyText'?: string;
    'inline'?: boolean;
    'label'?: string;
    'name'?: string;
    'readOnly'?: boolean;
    'required'?: boolean;
    'size'?: number;
    'value'?: string;
  }
  interface NgDateTimePicker extends JSXBase.HTMLAttributes<HTMLNgDateTimePickerElement> {
    'format'?: string;
    'onValueChange'?: (event: CustomEvent<any>) => void;
    'showDateControls'?: boolean;
    'showTimeControls'?: boolean;
    'value'?: string;
  }
  interface NgField extends JSXBase.HTMLAttributes<HTMLNgFieldElement> {
    'inline'?: boolean;
    'label'?: string;
  }
  interface NgIcon extends JSXBase.HTMLAttributes<HTMLNgIconElement> {
    'bordered'?: boolean;
    'fixedWidth'?: boolean;
    'name': string;
    'pullLeft'?: boolean;
    'pullRight'?: boolean;
    'size'?: 'xs' | 'sm' | 'lg' | '2x' | '3x' | '5x' | '7x' | '10x';
    'spin'?: boolean;
    'type'?: 'solid' | 'regular';
  }
  interface NgMenu extends JSXBase.HTMLAttributes<HTMLNgMenuElement> {
    'anchorEl'?: HTMLElement;
    'anchorOriginHorizontal'?: 'left' | 'center' | 'right';
    'anchorOriginVertical'?: 'top' | 'center' | 'bottom';
    'anchorPositionLeft'?: number;
    'anchorPositionTop'?: number;
    'anchorReference'?: 'anchorEl' | 'anchorPosition';
    'menuItems'?: any[];
  }
  interface NgMenuItem extends JSXBase.HTMLAttributes<HTMLNgMenuItemElement> {
    'caption': string;
    'checked'?: true | false | null;
    'menu'?: any[];
    'onCheckChange'?: (event: CustomEvent<any>) => void;
    'open'?: boolean;
  }
  interface NgNumberField extends JSXBase.HTMLAttributes<HTMLNgNumberFieldElement> {
    'autoComplete'?: boolean;
    'disabled'?: boolean;
    'emptyText'?: string;
    'inline'?: boolean;
    'label'?: string;
    'maxValue'?: number;
    'minValue'?: number;
    'name'?: string;
    'readOnly'?: boolean;
    'required'?: boolean;
    'size'?: number;
    'step'?: number;
    'value'?: number;
  }
  interface NgPage extends JSXBase.HTMLAttributes<HTMLNgPageElement> {}
  interface NgPageContent extends JSXBase.HTMLAttributes<HTMLNgPageContentElement> {}
  interface NgPanel extends JSXBase.HTMLAttributes<HTMLNgPanelElement> {
    'addFooter'?: boolean;
    'addHeader'?: boolean;
  }
  interface NgRow extends JSXBase.HTMLAttributes<HTMLNgRowElement> {}
  interface NgTab extends JSXBase.HTMLAttributes<HTMLNgTabElement> {
    'active'?: boolean;
    'closable'?: boolean;
    'label'?: string;
    'padding'?: boolean;
  }
  interface NgTabPanel extends JSXBase.HTMLAttributes<HTMLNgTabPanelElement> {
    'onTabChange'?: (event: CustomEvent<any>) => void;
  }
  interface NgTextField extends JSXBase.HTMLAttributes<HTMLNgTextFieldElement> {
    'autoComplete'?: boolean;
    'disabled'?: boolean;
    'emptyText'?: string;
    'inline'?: boolean;
    'label'?: string;
    'name'?: string;
    'readOnly'?: boolean;
    'required'?: boolean;
    'size'?: number;
    'value'?: string;
  }
  interface NgToolbar extends JSXBase.HTMLAttributes<HTMLNgToolbarElement> {
    'header'?: string;
  }
  interface NgWidget extends JSXBase.HTMLAttributes<HTMLNgWidgetElement> {
    'expanded'?: boolean;
    'fullScreen'?: boolean;
    'icon'?: string;
    'label'?: string;
    'padding'?: boolean;
  }

  interface IntrinsicElements {
    'ng-alert': NgAlert;
    'ng-area': NgArea;
    'ng-area-container': NgAreaContainer;
    'ng-button': NgButton;
    'ng-col': NgCol;
    'ng-container': NgContainer;
    'ng-data-table': NgDataTable;
    'ng-date-time-field': NgDateTimeField;
    'ng-date-time-picker': NgDateTimePicker;
    'ng-field': NgField;
    'ng-icon': NgIcon;
    'ng-menu': NgMenu;
    'ng-menu-item': NgMenuItem;
    'ng-number-field': NgNumberField;
    'ng-page': NgPage;
    'ng-page-content': NgPageContent;
    'ng-panel': NgPanel;
    'ng-row': NgRow;
    'ng-tab': NgTab;
    'ng-tab-panel': NgTabPanel;
    'ng-text-field': NgTextField;
    'ng-toolbar': NgToolbar;
    'ng-widget': NgWidget;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


